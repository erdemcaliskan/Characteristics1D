{
##################################################################################################
configPPS2
#Option 1. With inline: include the actual content of the file following inline in this following
#inline
#Option 2. Provide the file name for configPPS2

config/Domain/PPS2Config_Coh.txt

output_modes
{
scalars
scalars_vectors
vectors
}

##################################################################################################
# version controls

# true: for each version there is a separate folder for all random fields of One version
# false: the output folder is always _PP3 and contains all versions and all serial numbers
version_seperatePP3Folders
#1
0

# 1: values that are not computed (e.g. values when phid is stabilized) are printed as nan rather than 1e40
print_uncomputed_vals_as_nan
1

# 0: version columns are not added to PP3 file
# 1: they are added
# 2: only columns of fields that have more than 1 values (e.g. more than 1 cor. length, ...) are written
version_print_version_columns
1

# true: writes version material before acceptance and serial number
# false: these are written after accept flag and serial number
version_print_before_accept_serial
0

# prints version Number from the list of versions in generator file
version_print_version_No
1

# prints version Number for the output folder. These are version numbers from generator file, plus possible offset (SolveParameters::versionOffset)
version_print_version_No_wOffset
1

# print indices of version columns (e.g. for index 5 correlation length -> 5 is printed)
version_print_indices
1

# print values of version columns (e.g. for index 5 correlation length -> correlation[5] is printed)
version_print_values
1

##################################################################################################
# base name of the files (for csv, header, error log)
out_baseName
pps3Out

#generally it will be csv for csv files, but xlsx and txt are some other options
out_ext
#txt
csv


# for stage type data, we can get invalid data (for example if the run does not reach the terminal stage)
# in this case we generally don't print the data for this file. The values for such data are invalidNum (1e40)
# If the boolean below is true, the values are written as invalidNum
addInvalidData
#0
1

# for spatial fields over x, we may want to change the resolution. For example, if values given at 1001 points (resolution 1000), but we want the new resolution of 100 (101 points)
# spatialFieldResolutionCorrector = 100 or spatialFieldResolutionCorrector = -10 (i.e. 10 fold reduction)
# note that the solution can only decrease (from a fine mesh to a coarser representation)
# spatialFieldResolutionCorrector == 0 -> does not change the field
spatialFieldResolutionCorrector
0
#8
#-4
#-8 
#- 1024 mesh to 128 mesh



# For temporal fields (e.g. energyDissipated, sigma_homogenized, etc.) there are two options:
# TemporalFieldTimeStepValOrNumSteps 	> 0 -> TimeStepVal = temporalFieldTimeStepValOrNumSteps
#									  	< 0 -> NumTimeSteps = -temporalFieldTimeStepValOrNumSteps (e.g. final time = 10, this value = -400 -> timeStep = 10/400)
temporalFieldTimeStepValOrNumSteps
-400
#-100
#-4

# for time outputs, we can generate outputs for all DSU stems in each case timeStep4_DSU_outputs == 1, ever other of such time value for == 2, every third for this value == 3, ...
timeStep4_DSU_outputs
1

outputTypeActive
# pps3_stageStat: stage/stat (one line per run)
1
# -1 means data not printed on low disk systems
# pps3_timeStep: timeSteps (output at uniform times)
-1



######################################################################################################
# file movers
fileMovers
{
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_0_D_SizeFragmentation				ext		txt		}
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_0_D_StatFragmentation				ext		txt		}
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_1_Max_DelU_SizeFragmentation		ext		txt		}
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_1_Max_DelU_StatFragmentation		ext		txt		}
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_2_DelU_SizeFragmentation			ext		txt		}
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_2_DelU_StatFragmentation			ext		txt		}

{	isActive 1	isPPS2		0		fileName	sd_0__Summary											ext		txt		}
{	isActive 1	isPPS2		0		fileName	version_serial_number									ext		txt		}

{	isActive 1	isPPS2		1		fileName	_sd_0__tAll__keyParameters								ext		txt		}
{	isActive 1	isPPS2		1		fileName	_sd_0__tAll__TimeIndicesValues							ext		txt		}

# stat files for fragment points
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_1_Max_DelU_IndicesStrength			ext		txt		}
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_1_Max_DelU_Statstrength				ext		csv		}
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_1_Max_DelU_Statstress				ext		csv		}

# {	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_2_DelU_IndicesStrength				ext		txt		}
# {	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_2_DelU_Statstrength					ext		csv		}
# {	isActive 1	isPPS2		1		fileName	sd_0__tAll__FragCrn_2_DelU_Statstress					ext		csv		}

{	isActive 1	isPPS2		1		fileName	sd_0__tAll__Class_7_frag_maxEffDelU_FragCrn_1_Max_DelU_SizeFragmentation	ext		txt		}
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__Class_7_frag_maxEffDelU_FragCrn_1_Max_DelU_StatFragmentation	ext		txt		}
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__Class_7_frag_maxEffDelU_FragCrn_1_Max_DelU_ValuesStrength		ext		txt		}
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__Class_7_frag_maxEffDelU_FragCrn_1_Max_DelU_Statstrength			ext		csv		}
{	isActive 1	isPPS2		1		fileName	sd_0__tAll__Class_7_frag_maxEffDelU_FragCrn_1_Max_DelU_Statstress			ext		csv		}

}


######################################################################################################
#### these are the stages that are used very often and it's better to provide them once here so they can be easily changed and turned off/on
## isActive == -1 -> does not change the inActive in dataPointers below
##				0 -> turns them off (e.g. if final stage [stress is equal to zero] is unlikely and FIN is defined based on that
##				1 -> turns them on

## entries are name (e.g. FIN below) follow by a list of timeStamp, isActive, and postNames that will be added to latex name and CSV file column name

timeStampOverwriters
{
	# stage chosen for final (energy dissipation is stabilized) - generally for this one, the run must go for a long time 
	#	OR in PPS2 config in line for classification	interfaceDissEne change tol4FinalValChecks to a large value such as -0.01
	FIN
	{
		timeStamp
		{
			timeStampType	f
			lct				interfaceDissEne
		}
		post_name_In_CSV_file	_F
		post_name_Latex			_f
		isActive	-1
	}

	# stage chosen for max stage (sigma_bulk is maximum)
	MAX
	{
		timeStamp
		{
			timeStampType	m
			lct				epssig_bulk
		}
		post_name_In_CSV_file	_M
		post_name_Latex			_m
		isActive	-1
	}
	
	# stage chosen for ini/lin stage (damage first time becomes > 0) - for inhomogeneous initial damage, this is not a good one
	INI
	{
		timeStamp
		{
			timeStampType	l
			lct				Damage
		}
		post_name_In_CSV_file	_i
		post_name_Latex			_i
		isActive	-1
	}

	# change latex name
	tFIN
	{
		timeStamp
		{
			timeStampType	f
			lct				time
		}
		post_name_In_CSV_file	_tF
		post_name_Latex			_{tf}
		isActive	-1
	}

	# fragmentation final time, when the number of fragments saturates
	fFIN
	{
		timeStamp
		{
			timeStampType	f
			lct				frag_maxEffDelU
		}
		post_name_In_CSV_file	_fF
		post_name_Latex			_{ff}
		isActive	-1
	}

	fFINDelU
	{
		timeStamp
		{
			timeStampType	f
			lct				frag_DelU
		}
		post_name_In_CSV_file	_fFDelU
		post_name_Latex			_{ff{\Delta}U}
		isActive	-1
	}

}

######################################################################################################
# 4 = 2 (TYPE = pps3_stageStat, pps3_timeStep) x 2 (INP/OUT input / output ) blocks can be provided for the fields that go to csv files
# some names:

#		timeStamp:
#					timeStampType				:	actualTime		l		m		f 						(l -> lin, m -> max, f -> final)
#					lct							:	time	epssig_bc	epssig_bulk		interfaceDissEne	Damage	U	
#												:	frag_Damage		frag_maxEffDelU		frag_DelU			(these 3 are based on fragment count)
#																									-> criterion used to decide l, m, f
#					actualTime_indexType		:	ti_AllTimeSteps		ti_DSU_Fragment		ti_BulkInterfacePoints		ti_RawFinalSln_Scalars (timeIndex given relative to which output)
#					actualTime_index			: (actual time index given / meaning of the index under actualTime_indexType)
#					actualTime_val				: (actual time given)

#		stat_sv_type							
#																statistics of 			A. fields (energies, etc) 	B. fragmentation size Over all time
#												:	mean_arithmetic		sdiv	cov		min		max		index_min	index_max	var		mean_harmonic		mean_geometric
#																extract values for the start and end of the simulation
#			stat_sv_type									:	valStart	valEnd
#																the number of a vector of values (used to extract number of fragments)
#												:	number
#																extract all values of a SPATIAL field OR fragment sizes (latter not very useful here)
#												:	normalized_number, normalized number (useful for fragment counts relative to initial grid interface number)
#												:	all_field_val
#																extract all values of a TEMPORAL field 
#												:	all_field_time_val
#																
												
#		brittlenessRatioT						:	i,m				i,f				m,f	
#		brittlenessFieldT						:	time			strain			energy

#		to turn on getting fragmentation stats / sizes (note: default is none -> meaning not dealing with a fragment size statistics)
#		fragmentationCriterion					:	D	Max_DelU	DelU	none

#		normalizationMode						:	ene_KInitial	ene_UInitial	ene_PhiInitial		ene_KFinal		ene_UFinal		ene_PhiFinal		eneBCFinal		eneInputFinal
#												: 	E				rho					damping  c		Z		(elastic properties)
#												:	loadTime		tauC				# time scales (loading and fracture)
#												: 	sigmaC			deltaC				energyC			strainC		velC		psiC # energyC is TSR energy, psiC is strain/stress energy


#		fldName
#												A.	spatial fields [function of (x)]
#												:	D sigma  DelU	maxEffDelU   uL uR 
#												A.	space / spacetime integrals [from summary files]


#	fragPtStat									This is only on when wanting to print the statistics of (partially) fragmented interfaces
#												e.g. number, relative number, mean, min, etc
#												of (D=0, 0<D<1, D=1, 0<D, allD)
#												x  (separation (S), stick (ST), and all (STS)) modes
#												outputs are strengths or stresses at these points
#												this stamp has 4 members:
#													d_numerator_or_flag
#													d_denominator_or_flag
#													cs_numerator
#													cs_denominator
#				details
#												these 4 values refer to what we get from Contact_Damage_State_Config storage
#												d_numerator_or_flag ==
#													1.	inactive					nothing is obtained from Contact_Damage_State_Config): A trick to turn this off
#													2.	alpha, beta					alpha and beta values computed in Contact_Damage_Stat_Process_All_Interfaces are returned
#													3.	t0							values of the initial mesh are returned
#													4.	Dall, Dnz, Dz, Dgzn1, D1	choosing numerator interface point damage state (allD, 0<D, D=0,0<D<0,D=1)

#												 ONLY for case 4 above other entries will have a meaning
#													i.		cs_numerator	STS, ST, S		choosing numerator interface point contact/separation state 
#														STS=stick + separaton (all points in terms of contact / separation mode)
#														ST=stick (zero displacement jump)
#														S=separation (> 0 displacement jump)

#													ii. d_denominator_or_flag:
#														ii.a)						inactive: no denominator exists
#														ii.b)						Dall, Dnz, Dz, Dgzn1, D1 : denominator exists AND cs_denominator is meaningful

#													iii. cs_denominator		ONLY meaningful under ii.b) same values of STS, ST, S




##########################################################################################################################################################
#### stage csv
################################################
# stage/stat + input
dataPointers			pps3_stageStat				input
{

	{
		isActive
		1
		
		# initial field
		fldName
		field_finalResolution
	
		name_In_CSV_file	
		iniSc

		name_Latex
		\sigma_c
	}
}



################################################
# stage/stat + output
dataPointers			pps3_stageStat				output
{

# ############################## - damage field treated as input
	{
		isActive
		1
		
		fldName
		!sim_mean

		fragPtStat
		{
			d_numerator_or_flag	t0
		}

		name_In_CSV_file	
		fldName

		name_Latex
		\mu(\tilde{\sigma})
	}

	{
		isActive
		1
		
		fldName
		!sim_mn

		fragPtStat
		{
			d_numerator_or_flag	t0
		}

		name_In_CSV_file	
		fldName

		name_Latex
		\mathrm{min}(\tilde{\sigma})
	}

	{
		isActive
		1
		
		fldName
		!sim_mx

		fragPtStat
		{
			d_numerator_or_flag	t0
		}

		name_In_CSV_file	
		fldName

		name_Latex
		\mathrm{max}(\tilde{\sigma})
	}

	{
		isActive
		1
		
		fldName
		!sim_cov

		fragPtStat
		{
			d_numerator_or_flag	t0
		}

		name_In_CSV_file	
		fldName

		name_Latex
		\mathrm{cov}(\tilde{\sigma})
	}

	{
		isActive
		1
		
		fldName
		!sim_std

		fragPtStat
		{
			d_numerator_or_flag	t0
		}

		name_In_CSV_file	
		fldName

		name_Latex
		\varsigma(\tilde{\sigma})
	}

	{
		isActive
		1
		
		fldName
		!sim_span

		fragPtStat
		{
			d_numerator_or_flag	t0
		}

		name_In_CSV_file	
		fldName

		name_Latex
		\mathrm{span}(\tilde{\sigma})
	}


# ############################## - relative times 
# final
# key relative final times

# time sigma0 / time final phid 
[
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		time_sigma02phid_F

		name_Latex
		t_{\sigma,0}/t_{\phi_{d,f}}
	}

/
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				interfaceDissEne
			}
	
		# none used so its name is not added to total name
		name_In_CSV_file	
		none

		name_Latex
		none
	}
]


# time final fragmentation / time final phid 
[
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		time_fragment2phid_F

		name_Latex
		t_{frag,f}/t_{\phi_{d,f}}
	}

/
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				interfaceDissEne
			}
	
		# none used so its name is not added to total name
		name_In_CSV_file	
		none

		name_Latex
		none
	}
]


# time final fragmentation / simga_f
[
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		time_fragment2_sigma0

		name_Latex
		t_{frag,f}/t_{\sigma,0}
	}

/
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		none

		name_Latex
		none
	}
]

# time final fragmentation / simga_m
[
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	m
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		time_sigmam_2_fragment

		name_Latex
		t_{\sigma,M}/t_{frag,f}
	}

/
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		none

		name_Latex
		none
	}
]

# time sigma0 - time sigmaM
[
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		time_sigma0_minus_sigmaM

		name_Latex
		t_{\sigma,0}-t_{\sigma,m}
	}
-
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	m
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		none

		name_Latex
		none
	}
]

# time sigma0 - time sigmaM - normalized by tauc
[
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		time_sigma0_minus_sigmaM_norm_tauc

		name_Latex
		{(t_{\sigma,0}-t_{\sigma,m})}/\tau_c

		normalizationMode
		tauC		
	}
-
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	m
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		none

		name_Latex
		none

		normalizationMode
		tauC		
	}
]


# time sigma0 - time sigmaM - normalized by time load
[
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		time_sigma0_minus_sigmaM_norm_taul

		name_Latex
		{(t_{\sigma,0}-t_{\sigma,m})}/\tau_l

		normalizationMode
		loadTime		
	}
-
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	m
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		none

		name_Latex
		none

		normalizationMode
		loadTime		
	}
]

# ###############	comparison of times from diff criteria
# ######### Absolute times
	# time of final (based on FIN criterion)
	{
		isActive
		1
		
		fldName
		time

		overwriterName		FIN
	
		name_In_CSV_file	
		time

		name_Latex
		t
	}

	# time of sigma ~ 0
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		time_sigma0

		name_Latex
		t_{\sigma,0}
	}

	# time of fragment count saturated
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		time_fragment_F

		name_Latex
		t_{frag,f}
	}

	# time of first D = 1 (damage final)
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				Damage
			}
	
		name_In_CSV_file	
		time_damage_f

		name_Latex
		t_{D,f}
	}

	##### max
	# time of max (based on MAX criterion)
	{
		isActive
		1
		
		fldName
		time

		overwriterName		MAX
	
		name_In_CSV_file	
		time

		name_Latex
		t
	}

	# time of fragment count max rate
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	m
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		time_fragment_M

		name_Latex
		t_{frag,m}
	}

	# time of highest damage evolution (D source max) 
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	m
				lct				Damage
			}
	
		name_In_CSV_file	
		time_damage_m

		name_Latex
		t_{D,m}
	}

	##### ini
	# time of sigma start nonlinear
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	l
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		time_sigma_i

		name_Latex
		t_{\sigma,i}
	}

	# time of fragment count start
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	l
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		time_fragment_i

		name_Latex
		t_{frag,i}
	}
	
	# time when the first damage evolution starts (first D > 0 in the domain)
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	l
				lct				Damage
			}
	
		name_In_CSV_file	
		time_damage_i

		name_Latex
		t_{D,i}
	}


# ######### times relative to time cohesive
	# time of final (based on FIN criterion)
	{
		isActive
		1
		
		fldName
		time

		overwriterName		FIN
	
		name_In_CSV_file	
		time_norm_tauc

		name_Latex
		{(t/\tau_c)}

		normalizationMode
		tauC		
	}

	# time of sigma ~ 0
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		time_sigma0_norm_tauc

		name_Latex
		{t_{\sigma,}}/{\tau_c}

		normalizationMode
		tauC		
	}

	# time of fragment count saturated, normalized by tauC
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		time_fragment_F_norm_tauc

		name_Latex
		{t_{frag,f}}/{\tau_c}

		normalizationMode
		tauC		
	}

	# time of first D = 1 (damage final)
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				Damage
			}
	
		name_In_CSV_file	
		time_damage_f_norm_tauc

		name_Latex
		{t_{D,f}}/{\tau_c}

		normalizationMode
		tauC		
	}

	#### max
	# time of max (based on MAX criterion)
	{
		isActive
		1
		
		fldName
		time

		overwriterName		MAX
	
		name_In_CSV_file	
		time_norm_tauc

		name_Latex
		{(t/\tau_c)}

		normalizationMode
		tauC		
	}

	# time of fragment count max rate
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	m
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		time_fragment_M_norm_tauc

		name_Latex
		{t_{frag,m}/\tau_c}

		normalizationMode
		tauC		
	}

	# time of highest damage evolution (D source max) 
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	m
				lct				Damage
			}
	
		name_In_CSV_file	
		time_damage_m_norm_tauc

		name_Latex
		{t_{D,m}}/{\tau_c}

		normalizationMode
		tauC		
	}

	#### ini
	# time of sigma start nonlinear
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	l
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		time_sigma_i_norm_tauc

		name_Latex
		{t_{\sigma,i}}/{\tau_c}

		normalizationMode
		tauC		
	}

	# time of fragment count start
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	l
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		time_fragment_i_norm_tauc

		name_Latex
		{{t_{frag,i}}_{\tau_c}}

		normalizationMode
		tauC		
	}

	# time when the first damage evolution starts (first D > 0 in the domain)
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	l
				lct				Damage
			}
	
		name_In_CSV_file	
		time_damage_i_norm_tauc

		name_Latex
		{t_{D,i}}/{\tau_c}

		normalizationMode
		tauC		
	}


# ######### times relative to load time
	# time of final (based on FIN criterion)
	{
		isActive
		1
		
		fldName
		time

		overwriterName		FIN
	
		name_In_CSV_file	
		time_norm_taul

		name_Latex
		{(t/\tau_l)}

		normalizationMode
		loadTime		
	}

	# time of sigma ~ 0
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		time_sigma0_norm_taul

		name_Latex
		{t_{\sigma,0}}/{\tau_l}

		normalizationMode
		loadTime		
	}

	# time of fragment count saturated, normalized by tauC
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		time_fragment_F_norm_taul

		name_Latex
		{t_{frag,f}}/{\tau_l}

		normalizationMode
		loadTime		
	}

	# time of first D = 1 (damage final)
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	f
				lct				Damage
			}
	
		name_In_CSV_file	
		time_damage_f_norm_taul

		name_Latex
		{t_{D,f}}/{\tau_l}

		normalizationMode
		loadTime		
	}

	#### max
	# time of max (based on MAX criterion)
	{
		isActive
		1
		
		fldName
		time

		overwriterName		MAX
	
		name_In_CSV_file	
		time_norm_taul

		name_Latex
		{(t/\tau_l)}

		normalizationMode
		loadTime		
	}

	# time of fragment count max rate
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	m
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		time_fragment_M_norm_taul

		name_Latex
		{t_{frag,m}/\tau_l}

		normalizationMode
		loadTime		
	}

	# time of highest damage evolution (D source max) 
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	m
				lct				Damage
			}
	
		name_In_CSV_file	
		time_damage_m_norm_taul

		name_Latex
		{t_{D,m}}/{\tau_l}

		normalizationMode
		loadTime		
	}

	#### ini
	# time of sigma start nonlinear
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	l
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		time_sigma_i_norm_taul

		name_Latex
		{t_{\sigma,i}}/{\tau_l}

		normalizationMode
		loadTime		
	}

	# time of fragment count start
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	l
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		time_fragment_i_norm_taul

		name_Latex
		{{t_{frag,i}}_{\tau_l}}

		normalizationMode
		loadTime		
	}

	# time when the first damage evolution starts (first D > 0 in the domain)
	{
		isActive
		1
		
		fldName
		time

		timeStamp
			{
				timeStampType	l
				lct				Damage
			}

		name_In_CSV_file	
		time_damage_i_norm_taul

		name_Latex
		{t_{D,i}}/{\tau_l}

		normalizationMode
		loadTime		
	}

# ########################### 
# strain, stress relations
# ###############	strain-stress response
# ### max stage

	# sigma_max
	{
		isActive
		1
				
		fldName
		sigma_bulk

		overwriterName		MAX
		
		name_In_CSV_file	
		bar_sigma_bulk_norm

		name_Latex
		{(\bar{\sigma}_{bulk}/\sigma_c)}

		normalizationMode
		sigmaC		
	}


# ### final stage
	# energy_final
	{
		isActive
		1
				
		fldName
		energy_eps_total_bulk

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		psi_f

		name_Latex
		({\psi}_{\mathrm{f}}
	}

# ### final stage
	# energy_final
	{
		isActive
		1
				
		fldName
		energy_eps_total_bulk

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		psi_f_norm_psiC

		name_Latex
		{({\psi}_{\mathrm{f}}/\psi_c)}

		normalizationMode
		psiC		
	}

	# strain_final
	{
		isActive
		1
				
		fldName
		eps_bc

		timeStamp
			{
				timeStampType	f
				lct				epssig_bc
			}
	
		name_In_CSV_file	
		eps_f

		name_Latex
		{\epsilon}_{\mathrm{f}}
	}

	# strain_final
	{
		isActive
		1
				
		fldName
		eps_bc

		timeStamp
			{
				timeStampType	f
				lct				epssig_bc
			}
	
		name_In_CSV_file	
		eps_f_norm

		name_Latex
		{({\epsilon}_{\mathrm{f}}/\epsilon_c)}
		
		normalizationMode
		strainC		
	}


## Brittleness indicators
# psi based energy ratio
	{
		isActive
		1
				
		fldName
		energy_eps_diss2total_bulk

		timeStamp
			{
				timeStampType	m
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		psid2psi_m

		name_Latex
		({L\psi_d/\psi})_m
	}

	# m/f - energy
	{
		isActive
		1
		brittlenessRatioT						m,f	
		brittlenessFieldT						energy
				
		timeStamp
			{
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		Bmf_energy

		name_Latex
		B_{m/f}^{\psi}
	}

	# m/f - strain
	{
		isActive
		1
		brittlenessRatioT						m,f	
		brittlenessFieldT						strain
				
		timeStamp
			{
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		Bmf_strain

		name_Latex
		B_{m/f}^{\epsilon}
	}

	# i/m - strain
	{
		isActive
		1
		brittlenessRatioT						i,m	
		brittlenessFieldT						strain
				
		timeStamp
			{
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		Bim_strain

		name_Latex
		B_{i/m}^{\epsilon}
	}


# ############################## energies
# ############################## - relative energies
# final

# ratios, to see how close psi from strain stress is to domain dissipation loss
# final stage divided by phid at the same stress final stage
	{
		isActive
		1
				
		fldName
		energy_eps_dissL2phid_bulk

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		Lpsi2phid_both_strsfstage

		name_Latex
		({L\psi_d/\phi_d})_f
	}

	# energy_final
	{
		isActive
		1
				
		fldName
		energy_eps_total_bulk

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		psi_fstage2phid_finTime

		name_Latex
		{({\psi}_{\mathrm{f}}/{{\phi_d}_{\mathrm{fin,t}}}}
		normalizationMode
		eneDissFinal		
	}

# max stage
	{
		isActive
		1
				
		fldName
		energy_eps_dissL2phid_bulk

		timeStamp
			{
				timeStampType	m
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		Lpsid2phid_m

		name_Latex
		({L\psi_d/\phi_d})_m
	}

# key relative final dissipated energies
# phid sigma0 / final phid 
[
	{
		isActive
		1
		
		fldName
		phys_diss_interface_lost

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		phid_sigma02_timeF

		name_Latex
		\phi_d^{\sigma,0}/\phi_d^{t_F}
	}

/
	{
		isActive
		1

		stat_sv_type
		valEnd
		
		# lost, interfacial dissipation
		fldName
		phys_diss_interface_lost
	
		name_In_CSV_file	
		none

		name_Latex
		none
	}
]


# phid final fragmentation / time final phid 
[
	{
		isActive
		1
		
		fldName
		phys_diss_interface_lost

		timeStamp
			{
				timeStampType	f
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		phid_fragmentf2_timeF

		name_Latex
		\phi_d^{frag,f}/\phi_d^{t_F}
	}

/
	{
		isActive
		1

		stat_sv_type
		valEnd
		
		# lost, interfacial dissipation
		fldName
		phys_diss_interface_lost
	
		name_In_CSV_file	
		none

		name_Latex
		none
	}
]

# ###############	Energy Loss criteria - final stage (energy stabilized)
	# phi0
	{
		isActive
		1

		stat_sv_type
		valStart
		
		fldName
		phi0
	
		name_In_CSV_file	
		phi_0

		name_Latex
		\phi_0
	}		

#### phiD
	# phiD:   Dissipated energy - FIN stage
	{
		isActive
		1
		
		# lost, interfacial dissipation
		fldName
		phys_diss_interface_lost

		overwriterName		FIN
	
		name_In_CSV_file	
		phi_d

		name_Latex
		{\phi_d}
	}

	# phiD:   Dissipated energy
	{
		isActive
		1

		stat_sv_type
		valEnd
		
		# lost, interfacial dissipation
		fldName
		phys_diss_interface_lost
	
		name_In_CSV_file	
		phi_d_tFin

		name_Latex
		\phi_d^{t_F}
	}

	# phiD:   when sigma is zero
	{
		isActive
		1
		
		fldName
		phys_diss_interface_lost

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		phid_4sigma0

		name_Latex
		\phi_d^{\sigma,0}
	}

	# phiD:   when fragments are stable
	{
		isActive
		1
		
		fldName
		phys_diss_interface_lost

		timeStamp
			{
				timeStampType	f
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		phid_4fragmentF

		name_Latex
		\phi_d^{frag,f}
	}

	# phiD:   when damage is 1
	{
		isActive
		1
		
		fldName
		phys_diss_interface_lost

		timeStamp
			{
				timeStampType	f
				lct				Damage
			}
	
		name_In_CSV_file	
		phid_4damageF

		name_Latex
		\phi_d^{D,f}
	}

	# normalized energies
	# phiD:   Dissipated energy / normalized by initial energy at failed statefor eps/sig bulk criterion)
	{
		isActive
		1
		
		# lost, interfacial dissipation
		fldName
		phys_diss_interface_lost

		overwriterName		FIN
	
		name_In_CSV_file	
		phi_d_norm_phi0

		name_Latex
		{(\phi_d/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}

	# phiD:   Dissipated energy / normalized by initial energy at END of simulation
	{
		isActive
		1

		stat_sv_type
		valEnd
		
		# lost, interfacial dissipation
		fldName
		phys_diss_interface_lost
	
		name_In_CSV_file	
		phi_d_norm_phi0_tFin

		name_Latex
		\phi_d^{t_F}/\phi_0
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}
	
	# phiD:   when sigma is zero / normalized by initial energy 
	{
		isActive
		1
		
		fldName
		phys_diss_interface_lost

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		phid_4sigma0_norm_phi0

		name_Latex
		\phi_d^{\sigma,0}/\phi_0

		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}

	# phiD:   when fragments are stable  / normalized by initial energy 
	{
		isActive
		1
		
		fldName
		phys_diss_interface_lost

		timeStamp
			{
				timeStampType	f
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		phid_4fragmentF_norm_phi0

		name_Latex
		\phi_d^{frag,f}/\phi_0

		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}

	# phiD:   when damage is 1  / normalized by initial energy 
	{
		isActive
		1
		
		fldName
		phys_diss_interface_lost

		timeStamp
			{
				timeStampType	f
				lct				Damage
			}
	
		name_In_CSV_file	
		phid_4damageF_norm_phi0

		name_Latex
		\phi_d^{D,f}/\phi_0

		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}
	
	# normalization by input energy	
	# phiD:   Dissipated energy / normalized by input energy
	{
		isActive
		1
		
		# lost, interfacial dissipation
		fldName
		energy_phys_diss_lost_2_input

		overwriterName		FIN
	
		name_In_CSV_file	
		phi_d_norm_phi_input

		name_Latex
		{(\phi_d/\phi_{\mathrm{input}})}
		
		# used to say normalize w.r.t. time zero energy
	}
	
	# phiD:   Dissipated energy / normalized by input energy
	{
		isActive
		1

		stat_sv_type
		valEnd
		
		# lost, interfacial dissipation
		fldName
		energy_phys_diss_lost_2_input
	
		name_In_CSV_file	
		phi_d_norm_phi_input_tFin

		name_Latex
		\phi_d^{t_F}/{\phi_{\mathrm{input}}}
			}


	# phiD:   when sigma is zero / normalized by input energy 
	{
		isActive
		1
		
		fldName
		energy_phys_diss_lost_2_input

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		phid_4sigma0_norm_phi_input

		name_Latex
		\phi_d^{\sigma,0}/\phi_{\mathrm{input}}
	}

	# phiD:   when fragments are stable  / normalized by input energy 
	{
		isActive
		1
		
		fldName
		energy_phys_diss_lost_2_input

		timeStamp
			{
				timeStampType	f
				lct				frag_maxEffDelU
			}
	
		name_In_CSV_file	
		phid_4fragf_norm_phi_input

		name_Latex
		\phi_d^{frag,f}/\phi_{\mathrm{input}}
	}

	# phiD:   when damage is 1  / normalized by input energy 
	{
		isActive
		1
		
		fldName
		energy_phys_diss_lost_2_input

		timeStamp
			{
				timeStampType	f
				lct				Damage
			}
	
		name_In_CSV_file	
		phid_4Df_norm_phi_input

		name_Latex
		\phi_d^{D,f}/\phi_{\mathrm{input}}
	}

##########
# ###############	key fragmentation QoI at different stages
# rations: fragment count based on current opening (not a good way to look at) to fragment decision from time zero to now
# max stage
[
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	number

		overwriterName		MAX
		
		name_In_CSV_file	
		Nl_DelU2MaxDelU

		name_Latex
		{N(l)^{\mathrm{cur}}/N(l)}
	}
/
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	number

		overwriterName		MAX
		
		name_In_CSV_file	
		none

		name_Latex
		none
	}
]

# rations: fragment count based on current opening (not a good way to look at) to fragment decision from time zero to now
# tFinal stage
[
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	number

		overwriterName		tFIN
		
		name_In_CSV_file	
		Nl_DelU2MaxDelU

		name_Latex
		{N(l)^{\mathrm{cur}}/N(l)}
	}
/
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	number

		overwriterName		tFIN
		
		name_In_CSV_file	
		none

		name_Latex
		none
	}
]
	

	########## max stage: use sigma max stage
	# number of fragment size (length / meanFragment size)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	number

		overwriterName		MAX
		
		name_In_CSV_file	
		Nl

		name_Latex
		N(l)
	}

	# lbar (mean fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	mean_arithmetic		

		overwriterName		MAX
		
		name_In_CSV_file	
		lbar

		name_Latex
		\bar{l}
	}

	# lmin (min fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	min

		overwriterName		MAX
		
		name_In_CSV_file	
		lmin

		name_Latex
		\mathrm{min}(l)
	}

	# lmax (max fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	max

		overwriterName		MAX
		
		name_In_CSV_file	
		lmax

		name_Latex
		\mathrm{max}(l)
	}

	# varsigma_l (standard deviation fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	sdiv		

		overwriterName		MAX
		
		name_In_CSV_file	
		sdiv_l

		name_Latex
		\varsigma({l}
	}

	# cov_l (coefficient of variation = sdiv / mean)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	cov		

		overwriterName		MAX
		
		name_In_CSV_file	
		cov_l

		name_Latex
		\mathrm{cov}({l}
	}

	########## final time
	# number of fragment size (length / meanFragment size)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	number

		overwriterName		tFIN
		
		name_In_CSV_file	
		Nl

		name_Latex
		N(l)
	}

	# lbar (mean fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	mean_arithmetic		

		overwriterName		tFIN
		
		name_In_CSV_file	
		lbar

		name_Latex
		\bar{l}
	}

	# lmin (min fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	min

		overwriterName		tFIN
		
		name_In_CSV_file	
		lmin

		name_Latex
		\mathrm{min}(l)
	}

	# lmax (max fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	max

		overwriterName		tFIN
		
		name_In_CSV_file	
		lmax

		name_Latex
		\mathrm{max}(l)
	}

	#varsigma_l (standard deviation fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	sdiv		

		overwriterName		tFIN
		
		name_In_CSV_file	
		sdiv_l

		name_Latex
		\varsigma(l)
	}

	# cov_l (coefficient of variation = sdiv / mean)
	{
		isActive
		1
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	cov		

		overwriterName		tFIN
		
		name_In_CSV_file	
		cov_l

		name_Latex
		\mathrm{cov}(l)
	}


	########## final stage: use EneDiss_final stabilized
	# number of fragment size (length / meanFragment size)
	{
		isActive
		0000
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	number

		overwriterName		FIN
		
		name_In_CSV_file	
		Nl

		name_Latex
		N(l)
	}

	# lbar (mean fragment size)
	{
		isActive
		0000
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	mean_arithmetic		

		overwriterName		FIN
		
		name_In_CSV_file	
		lbar

		name_Latex
		\bar{l}
	}

	# lmin (min fragment size)
	{
		isActive
		0000
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	min

		overwriterName		FIN
		
		name_In_CSV_file	
		lmin

		name_Latex
		\mathrm{min}(l)
	}

	# lmax (max fragment size)
	{
		isActive
		0000
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	max

		overwriterName		FIN
		
		name_In_CSV_file	
		lmax

		name_Latex
		\mathrm{max}(l)
	}

	#varsigma_l (standard deviation fragment size)
	{
		isActive
		0000
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	sdiv		

		overwriterName		FIN
		
		name_In_CSV_file	
		sdiv_l

		name_Latex
		\varsigma(l)
	}

	# cov_l (coefficient of variation = sdiv / mean)
	{
		isActive
		0000
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	cov		

		overwriterName		FIN
		
		name_In_CSV_file	
		cov_l

		name_Latex
		\mathrm{cov}(l)
	}

	# Turned off as this field has variable length and not suitable for csv files
	# fragment sizes
	{
		isActive
		0
		
		fragmentationCriterion			Max_DelU	

		stat_sv_type	all_field_val		

		overwriterName		FIN
		
		name_In_CSV_file	
		ls

		name_Latex
		l
	}

##########
	########## max stage: use sigma max stage
	# number of fragment size (length / meanFragment size)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	number

		overwriterName		MAX
		
		name_In_CSV_file	
		Nl_DelU

		name_Latex
		N(l)^{\mathrm{cur}}
	}

	# lbar (mean fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	mean_arithmetic		

		overwriterName		MAX
		
		name_In_CSV_file	
		lbar_DelU

		name_Latex
		\bar{l}^{\mathrm{cur}}
	}

	# lmin (min fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	min

		overwriterName		MAX
		
		name_In_CSV_file	
		lmin_DelU

		name_Latex
		\mathrm{min}(l)^{\mathrm{cur}}
	}

	# lmax (max fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	max

		overwriterName		MAX
		
		name_In_CSV_file	
		lmax_DelU

		name_Latex
		\mathrm{max}(l)^{\mathrm{cur}}
	}

	# varsigma_l (standard deviation fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	sdiv		

		overwriterName		MAX
		
		name_In_CSV_file	
		sdiv_l_DelU

		name_Latex
		\varsigma({l}^{\mathrm{cur}}
	}

	# cov_l (coefficient of variation = sdiv / mean)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	cov		

		overwriterName		MAX
		
		name_In_CSV_file	
		cov_l_DelU

		name_Latex
		\mathrm{cov}({l}^{\mathrm{cur}}
	}

	########## final time
	# number of fragment size (length / meanFragment size)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	number

		overwriterName		tFIN
		
		name_In_CSV_file	
		Nl_DelU

		name_Latex
		N(l)^{\mathrm{cur}}
	}

	# lbar (mean fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	mean_arithmetic		

		overwriterName		tFIN
		
		name_In_CSV_file	
		lbar_DelU

		name_Latex
		\bar{l}^{\mathrm{cur}}
	}

	# lmin (min fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	min

		overwriterName		tFIN
		
		name_In_CSV_file	
		lmin_DelU

		name_Latex
		\mathrm{min}(l)^{\mathrm{cur}}
	}

	# lmax (max fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	max

		overwriterName		tFIN
		
		name_In_CSV_file	
		lmax_DelU

		name_Latex
		\mathrm{max}(l)^{\mathrm{cur}}
	}

	#varsigma_l (standard deviation fragment size)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	sdiv		

		overwriterName		tFIN
		
		name_In_CSV_file	
		sdiv_l_DelU

		name_Latex
		\varsigma(l)^{\mathrm{cur}}
	}

	# cov_l (coefficient of variation = sdiv / mean)
	{
		isActive
		1
		
		fragmentationCriterion			DelU	

		stat_sv_type	cov		

		overwriterName		tFIN
		
		name_In_CSV_file	
		cov_l_DelU

		name_Latex
		\mathrm{cov}(l)^{\mathrm{cur}}
	}





############################################################################################
# begin fragmentation point count, strength, and stress stats

	{
		isActive
		1
		
		fldName
		nodeCount

		fragPtStat
		{
			d_numerator_or_flag	t0
		}

		name_In_CSV_file	
		fldName

		name_Latex
		{n_\mathrm{node}}
	}

# ##############################
# fragmentation stats
##### final stage of fragmentation (based on MaxDelU)

# alpha
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	alpha
		}

		name_In_CSV_file	
		alpha

		name_Latex
		\alpha
	}

# beta
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	beta
		}

		name_In_CSV_file	
		beta

		name_Latex
		\beta
	}

# ########## fragment numbers and relative numbers
# ## final fragmentation state - D = 1 (that is fully debonded interfaces)
# N(D=1)
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_D1_STS

		name_Latex
		{N_{\mathrm{D=1}}^{\mathrm{STS}}}
	}

# N(D=1,ST) bonded only at D = 1
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		ST
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_D1_ST

		name_Latex
		{N_{\mathrm{D=1}}^{\mathrm{ST}}}
	}

# rN(D=1) # number of fragments / initial interfaces (what percentage is broken) 
# This should be equal to alpha -> made inactive
	{
		isActive
		0
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	normalized_number

		name_In_CSV_file	
		rN_D1_STS

		name_Latex
		{{\mathrm{rN}}_{\mathrm{D=1}}^{\mathrm{STS}}}
	}

# N(D=1,ST)/N(D=1,STS) relative number of broken bonds that are in bonded mode
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		ST

			d_denominator_or_flag	D1
			cs_denominator			STS
		}

		stat_sv_type	number

		name_In_CSV_file	
		rN_D1_ST2STS

		name_Latex
		{{\mathrm{rN}}_{\mathrm{D=1}}^{\mathrm{ST2STS}}}
	}

# N(D=1,STS)/N(D>0,STS) relative number of broken bonds to those that have partial or full damage
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS

			d_denominator_or_flag	Dnz
			cs_denominator			STS
		}

		stat_sv_type	number

		name_In_CSV_file	
		rN_D12Dnz_STS

		name_Latex
		{{\mathrm{rN}}_{\mathrm{D=1/D>0}}^{\mathrm{STS}}}
	}


# N(D=1) based on DelU rather than maxDelU in all outputs here
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFINDelU
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_D1_STS

		name_Latex
		{N_{\mathrm{D=1}}^{\mathrm{STS}}}
	}




# N(D=1) based on DelU rather than maxDelU in all outputs here  / N(D=1) maxDelU
[
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_D14MaxDelU2DelU

		name_Latex
		{N_{\mathrm{D=1}}^{\mathrm{max}{{\Delta}u}/{{\Delta}u}}}
	}
/
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFINDelU
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	number

		name_In_CSV_file	
		none

		name_Latex
		none
	}
]


# N(D>0)
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_Dnz_STS

		name_Latex
		{N_{\mathrm{D>0}}^{\mathrm{STS}}}
	}

# N(D>0,ST) bonded only for D > 0
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		ST
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_Dnz_ST

		name_Latex
		{N_{\mathrm{D>0}}^{\mathrm{ST}}}
	}

# N(D>0,ST)/N(D>0,STS) relative number of broken bonds that are in bonded mode
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		ST

			d_denominator_or_flag	Dnz
			cs_denominator			STS
		}

		stat_sv_type	number

		name_In_CSV_file	
		rN_Dnz_ST2STS

		name_Latex
		{{\mathrm{rN}}_{\mathrm{D>0}}^{\mathrm{ST2STS}}}
	}

# rN(D>0) # number of fragments with D > 0 / initial interfaces (what percentage has damage) 
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS
		}

		stat_sv_type	normalized_number

		name_In_CSV_file	
		rN_Dnz_STS

		name_Latex
		{{\mathrm{rN}}_{\mathrm{D>0}}^{\mathrm{STS}}}
	}
	
# N(Dall,ST) how many interfaces are in contact (compressive stress and delta =~ 0)
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dall
			cs_numerator		ST
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_Dall_ST

		name_Latex
		{N^{\mathrm{ST}}}
	}
	
# rN(Dall,ST) how many interfaces are in contact (compressive stress and delta =~ 0) -- relative to -- initial interfaces
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dall
			cs_numerator		ST
		}

		stat_sv_type	normalized_number

		name_In_CSV_file	
		rN_Dall_ST

		name_Latex
		{\mathrm{rN}^{\mathrm{ST}}}
	}

# N(D=0,ST) how many D = 0 (bonded) interfaces have compressive stress
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dz
			cs_numerator		ST
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_Dz_ST

		name_Latex
		{N_{D=0}^{\mathrm{ST}}}
	}

# what percentage of still bonded interfaces have compressive strength
# N(D=0,ST)/N(D=0,STS) what percentage of D = 0 (bonded) interfaces have compressive stress
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dz
			cs_numerator		ST
			
			d_denominator_or_flag Dz
			cs_denominator		STS
		}

		stat_sv_type	number

		name_In_CSV_file	
		rN_Dz_ST2STS

		name_Latex
		{N_{D=0}^{\mathrm{ST2STS}}}
	}

# rN(D=0,ST) number of D = 0 with compressive stress -- relative -- to initial interfaces
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dz
			cs_numerator		ST
		}

		stat_sv_type	normalized_number

		name_In_CSV_file	
		rN_Dz_ST

		name_Latex
		{\mathrm{rN}^{D=0}_{\mathrm{ST}}}
	}

# ########## fragment strengths (D = 1)
# mu(strength(D=1))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_strength_D1_STS

		name_Latex
		{\mu(\tilde{\sigma})_{\mathrm{D=1}}^{\mathrm{STS}}}
	}

# mu(strength(D=1))/mu(all interfaces)
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS

			d_denominator_or_flag	Dall
			cs_denominator		STS
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_strength_D12Dall_STS

		name_Latex
		{\mu(\tilde{\sigma})_{\mathrm{D=1/\mathrm{allD}}}^{\mathrm{STS}}}
	}

# mu(strength(D=1))/mu(strength(D>0))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS

			d_denominator_or_flag	Dnz
			cs_denominator		STS
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_strength_D12Dnz_STS

		name_Latex
		{\mu(\tilde{\sigma})_{\mathrm{D=1/D>0}}^{\mathrm{STS}}}
	}
	
# min(strength(D=1))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_strength_D1_STS

		name_Latex
		{\mathrm{min}(\tilde{\sigma})_{\mathrm{D=1}}^{\mathrm{STS}}}
	}

# min(strength(D=1))/min(all interfaces)
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS

			d_denominator_or_flag	Dall
			cs_denominator		STS
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_strength_D12Dall_STS

		name_Latex
		{\mathrm{min}(\tilde{\sigma})_{\mathrm{D=1/\mathrm{allD}}}^{\mathrm{STS}}}
	}

# min(strength(D=1))/min(strength(D>0))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS

			d_denominator_or_flag	Dnz
			cs_denominator		STS
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_strength_D12Dnz_STS

		name_Latex
		{\mathrm{min}(\tilde{\sigma})_{\mathrm{D=1/D>0}}^{\mathrm{STS}}}
	}

# max(strength(D=1))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	max

		name_In_CSV_file	
		max_strength_D1_STS

		name_Latex
		{\mathrm{max}(\tilde{\sigma})_{\mathrm{D=1}}^{\mathrm{STS}}}
	}
	
	# cov(strength(D=1))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	cov

		name_In_CSV_file	
		cov_strength_D1_STS

		name_Latex
		{\mathrm{cov}(\tilde{\sigma})_{\mathrm{D=1}}^{\mathrm{STS}}}
	}

	# sdiv(strength(D=1))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	sdiv

		name_In_CSV_file	
		sdiv_strength_D1_STS

		name_Latex
		{\mathrm{sdiv}(\tilde{\sigma})_{\mathrm{D=1}}^{\mathrm{STS}}}
	}


# ########## fragment strengths (D > 0)
# mu(strength(D>0))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_strength_Dnz_STS

		name_Latex
		{\mu(\tilde{\sigma})_{\mathrm{D>0}}^{\mathrm{STS}}}
	}

# mu(strength(D>0))/mu(all interfaces)
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS

			d_denominator_or_flag	Dall
			cs_denominator		STS
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_strength_Dnz2Dall_STS

		name_Latex
		{\mu(\tilde{\sigma})_{\mathrm{D>0/\mathrm{allD}}}^{\mathrm{STS}}}
	}

# min(strength(D>0))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_strength_Dnz_STS

		name_Latex
		{\mathrm{min}(\tilde{\sigma})_{\mathrm{Dnz}}^{\mathrm{STS}}}
	}

# min(strength(Dnz))/min(all interfaces)
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS

			d_denominator_or_flag	Dall
			cs_denominator		STS
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_strength_D12Dall_STS

		name_Latex
		{\mathrm{min}(\tilde{\sigma})_{\mathrm{D>0/\mathrm{allD}}}^{\mathrm{STS}}}
	}

# max(strength(D>0))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS
		}

		stat_sv_type	max

		name_In_CSV_file	
		max_strength_Dnz_STS

		name_Latex
		{\mathrm{max}(\tilde{\sigma})_{\mathrm{D>0}}^{\mathrm{STS}}}
	}
	
	# cov(strength(D>0))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS
		}

		stat_sv_type	cov

		name_In_CSV_file	
		cov_strength_Dnz_STS

		name_Latex
		{\mathrm{cov}(\tilde{\sigma})_{\mathrm{D>0}}^{\mathrm{STS}}}
	}

	# sdiv(strength(D>0))
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS
		}

		stat_sv_type	sdiv

		name_In_CSV_file	
		sdiv_strength_D1_STS

		name_Latex
		{\mathrm{sdiv}(\tilde{\sigma})_{\mathrm{D>0}}^{\mathrm{STS}}}
	}

# ########## fragment compressive stresses (D = 1)
# mu(stress(D=1))
	{
		isActive
		1
		
		fldName
		stress

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		ST
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_stress_D1_ST

		name_Latex
		{\mu(\sigma)_{\mathrm{D=1}}^{\mathrm{ST}}}
	}

# min(stress(D=1))
	{
		isActive
		1
		
		fldName
		stress

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		ST
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_stress_D1_ST

		name_Latex
		{\mathrm{min}(\sigma)_{\mathrm{D=1}}^{\mathrm{ST}}}
	}
	
# ########## fragment compressive stresses (D > 0)
# mu(stress(D>0))
	{
		isActive
		1
		
		fldName
		stress

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		ST
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_stress_Dnz_ST

		name_Latex
		{\mu(\sigma)_{\mathrm{D>0}}^{\mathrm{ST}}}
	}

# min(stress(D>0))
	{
		isActive
		1
		
		fldName
		stress

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		ST
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_stress_Dnz_ST

		name_Latex
		{\mathrm{min}(\sigma)_{\mathrm{D>0}}^{\mathrm{ST}}}
	}
	
# ########## fragment compressive stresses (D = 0)
# mu(stress(D=0))
	{
		isActive
		1
		
		fldName
		stress

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dz
			cs_numerator		ST
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_stress_Dz_ST

		name_Latex
		{\mu(\sigma)_{\mathrm{D=0}}^{\mathrm{ST}}}
	}

# min(stress(D=0))
	{
		isActive
		1
		
		fldName
		stress

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dz
			cs_numerator		ST
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_stress_Dz_ST

		name_Latex
		{\mathrm{min}(\sigma)_{\mathrm{D=0}}^{\mathrm{ST}}}
	}

# ########## fragment compressive stresses (all D)
# mu(stress(allD))
	{
		isActive
		1
		
		fldName
		stress

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dall
			cs_numerator		ST
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_stress_Dall_ST

		name_Latex
		{\mu(\sigma)^{\mathrm{ST}}}
	}

# min(stress(allD))
	{
		isActive
		1
		
		fldName
		stress

		overwriterName		fFIN
	
		fragPtStat
		{
			d_numerator_or_flag	Dall
			cs_numerator		ST
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_stress_Dall_ST

		name_Latex
		{\mathrm{min}(\sigma)^{\mathrm{ST}}}
	}
	
# ########### select values for max stage
# alpha(Max stage)
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX

		fragmentationCriterion	Max_DelU
		
		fragPtStat
		{
			d_numerator_or_flag	alpha
		}

		name_In_CSV_file	
		alpha

		name_Latex
		\alpha
	}

# beta (max stage)
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX

		fragmentationCriterion	Max_DelU
	
		fragPtStat
		{
			d_numerator_or_flag	beta
		}

		name_In_CSV_file	
		beta

		name_Latex
		\beta
	}

# ########## fragment numbers and relative numbers
# ## max stage fragmentation state - D = 1 (that is fully debonded interfaces)
# N(D=1)
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_D1_STS

		name_Latex
		{N_{\mathrm{D=1}}^{\mathrm{STS}}}
	}

# N(D=1,ST) bonded only at D = 1 - max stage
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		ST
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_D1_ST

		name_Latex
		{N_{\mathrm{D=1}}^{\mathrm{ST}}}
	}

# N(D>0) - max stage
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_Dnz_STS

		name_Latex
		{N_{\mathrm{D>0}}^{\mathrm{STS}}}
	}
	
# N(D>0,ST) bonded only for D > 0 - at MAX stage
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		ST
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_Dnz_ST

		name_Latex
		{N_{\mathrm{D>0}}^{\mathrm{ST}}}
	}

# N(Dall,ST) how many interfaces are in contact (compressive stress and delta =~ 0) - MAX stage
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	Dall
			cs_numerator		ST
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_Dall_ST

		name_Latex
		{N^{\mathrm{ST}}}
	}

# N(D=0,ST) how many D = 0 (bonded) interfaces have compressive stress - max stage
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	Dz
			cs_numerator		ST
		}

		stat_sv_type	number

		name_In_CSV_file	
		N_Dz_ST

		name_Latex
		{N_{D=0}^{\mathrm{ST}}}
	}
	
# ########## fragment strengths (D = 1) - MAX stage
# mu(strength(D=1)) - max stage
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_strength_D1_STS

		name_Latex
		{\mu(\tilde{\sigma})_{\mathrm{D=1}}^{\mathrm{STS}}}
	}


# min(strength(D=1)) - max stage
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	D1
			cs_numerator		STS
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_strength_D1_STS

		name_Latex
		{\mathrm{min}(\tilde{\sigma})_{\mathrm{D=1}}^{\mathrm{STS}}}
	}

# ########## fragment strengths (D > 0) - MAX stage
# mu(strength(D>0)) - MAX stage
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_strength_Dnz_STS

		name_Latex
		{\mu(\tilde{\sigma})_{\mathrm{D>0}}^{\mathrm{STS}}}
	}

# min(strength(D>0)) - MAX stage
	{
		isActive
		1
		
		fldName
		strength

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	Dnz
			cs_numerator		STS
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_strength_Dnz_STS

		name_Latex
		{\mathrm{min}(\tilde{\sigma})_{\mathrm{Dnz}}^{\mathrm{STS}}}
	}

# ########## fragment compressive stresses (all D) - MAX stage
# mu(stress(allD)) - MAX stage
	{
		isActive
		1
		
		fldName
		stress

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	Dall
			cs_numerator		ST
		}

		stat_sv_type	mean_arithmetic

		name_In_CSV_file	
		mu_stress_Dall_ST

		name_Latex
		{\mu(\sigma)^{\mathrm{ST}}}
	}

# min(stress(allD)) - MAX stage
	{
		isActive
		1
		
		fldName
		stress

		overwriterName		MAX
	
		fragmentationCriterion	Max_DelU

		fragPtStat
		{
			d_numerator_or_flag	Dall
			cs_numerator		ST
		}

		stat_sv_type	min

		name_In_CSV_file	
		min_stress_Dall_ST

		name_Latex
		{\mathrm{min}(\sigma)^{\mathrm{ST}}}
	}

# end fragmentation point count, strength, and stress stats
############################################################################################






##########
	# K:   K / normalized by initial energy at failed state
	{
		isActive
		1
		
		fldName
		K

		overwriterName		FIN
	
		name_In_CSV_file	
		phi_K_norm

		name_Latex
		{(K/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}


	# U:   U / normalized by initial energy at failed state
	{
		isActive
		1
		
		fldName
		U

		overwriterName		FIN
	
		name_In_CSV_file	
		phi_U_norm

		name_Latex
		{(U/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}

	# U:   U / normalized by phi at FIN state
	{
		isActive
		1
		
		fldName
		U2phi

		overwriterName		FIN
	
		name_In_CSV_file	
		U2phi

		name_Latex
		{(U/\phi)}
	}



##########
	# K:   K / normalized by initial energy at tFinal
	{
		isActive
		1
		
		fldName
		K

		overwriterName		tFIN
	
		name_In_CSV_file	
		phi_K_norm

		name_Latex
		{(K/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}


	# U:   U / normalized by initial energy at tFinal
	{
		isActive
		1
		
		fldName
		U

		overwriterName		tFIN
	
		name_In_CSV_file	
		phi_U_norm

		name_Latex
		{(U/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}

	# U:   U / normalized by phi at tFinal
	{
		isActive
		1
		
		fldName
		U2phi

		overwriterName		tFIN
	
		name_In_CSV_file	
		U2phi

		name_Latex
		{(U/\phi)}_{tF}
	}


##########
	# K:   K / normalized by initial energy at max stage
	{
		isActive
		1
		
		fldName
		K

		overwriterName		MAX
	
		name_In_CSV_file	
		phi_K_M_norm

		name_Latex
		{(K_M/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}


	# U:   U / normalized by initial energy at max stage
	{
		isActive
		1
		
		fldName
		U

		overwriterName		MAX
	
		name_In_CSV_file	
		phi_U_M_norm

		name_Latex
		{(U_M/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}

	# U:   U / normalized by phi at max stage
	{
		isActive
		1
		
		fldName
		U2phi

		overwriterName		MAX
	
		name_In_CSV_file	
		U2phi_M

		name_Latex
		{(U_M/\phi_M)}
	}


# ###############	Damage values at various stages
	# (max Damage) at max stage - strain stress response
	{
		isActive
		1
				
		fldName
		max_interface_damage

		overwriterName		MAX
		
		name_In_CSV_file	
		Dmax

		name_Latex
		D^{\mathrm{max}}
	}

	# (mean Damage) at max stage - strain stress response
	{
		isActive
		1
				
		fldName
		mean_interface_damage

		overwriterName		MAX
		
		name_In_CSV_file	
		Dbar

		name_Latex
		\bar{D}
	}

	# (mean Damage) at final stage - strain stress response
	{
		isActive
		1
				
		fldName
		mean_interface_damage

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		Dbar_eps_f

		name_Latex
		\bar{D}_{{\epsilon}_{\mathrm{f}}}
	}	
	
	# (mean Damage) at final stage - Energy dissipation response
	{
		isActive
		1
				
		fldName
		mean_interface_damage

		overwriterName		FIN
	
		name_In_CSV_file	
		Dbar

		name_Latex
		\bar{D}
	}	
	
	# (mean Damage) at final stage - Damaged based criterion (i.e. when the first point is damaged)
	{
		isActive
		1
				
		fldName
		mean_interface_damage

		timeStamp
			{
				timeStampType	f
				lct				Damage
			}
	
		name_In_CSV_file	
		Dbar_D_f

		name_Latex
		\bar{D}_{D,f}
	}	
	

# ##############################################################
## phiNumerical
# ###############	comparison of phi = K + U from diff criteria

	# phiNumerical:   Dissipated numerical - FIN
	{
		isActive
		1
		
		# lost, interfacial dissipation
		fldName
		numerial_energy_diss

		overwriterName		FIN
	
		name_In_CSV_file	
		phi_N

		name_Latex
		{\phi_N}
	}

	# phiNumerical:   final time
	{
		isActive
		1

		stat_sv_type
		valEnd
		
		# lost, interfacial dissipation
		fldName
		numerial_energy_diss
	
		name_In_CSV_file	
		phi_N_tFin

		name_Latex
		\phi_N^{t_F}
	}

	# phiNumerical:   Dissipated numerical / normalized by initial energy at failed statefor eps/sig bulk criterion)
	{
		isActive
		1
		
		# lost, interfacial dissipation
		fldName
		numerial_energy_diss

		overwriterName		FIN
	
		name_In_CSV_file	
		phi_N_norm_phi0

		name_Latex
		{(\phi_N/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}

	# phiNumerical:   Dissipated numerical / normalized by initial energy at END of simulation
	{
		isActive
		1

		stat_sv_type
		valEnd
		
		# lost, interfacial dissipation
		fldName
		numerial_energy_diss
	
		name_In_CSV_file	
		phi_N_norm_phi0_tFin

		name_Latex
		\phi_N^{t_F}/\phi_0
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}
	
	# phiNumerical:   Dissipated numerical / normalized by input energy
	{
		isActive
		1
		
		# lost, interfacial dissipation
		fldName
		energy_numerical_diss_2_input

		overwriterName		FIN
	
		name_In_CSV_file	
		phi_N_norm_phi_input

		name_Latex
		{(\phi_N/\phi_{\mathrm{input}})}
		
		# used to say normalize w.r.t. time zero energy
	}
	
	# phiNumerical:   Dissipated numerical / normalized by input energy
	{
		isActive
		1

		stat_sv_type
		valEnd
		
		# lost, interfacial dissipation
		fldName
		energy_numerical_diss_2_input
	
		name_In_CSV_file	
		phi_N_norm_phi_input_tFin

		name_Latex
		\phi_N^{t_F}/{\phi_{\mathrm{input}}}
	}


# 	normalized numerical energy disspation - max value over time (to check solution accuracy)
	{
		isActive
		1

		stat_sv_type
		max
		
		# lost, interfacial dissipation
		fldName
		energy_numerical_diss_2_input
	
		name_In_CSV_file	
		maxInTime_NumDiss2InputEne

		name_Latex
		\phi_N/\phi_\mathrm{inp}
	}


	# phiNumerical:   Dissipated numerical / physical dissipation
	{
		isActive
		1
		
		# lost, interfacial dissipation
		fldName
		energy_numerical_diss_2_phys_diss

		overwriterName		FIN
	
		name_In_CSV_file	
		phi_N_norm_phi_d

		name_Latex
		{(\phi_N/\phi_d)}
		
		# used to say normalize w.r.t. time zero energy
	}
	
	# phiNumerical:   Dissipated numerical / physical dissipation
	{
		isActive
		1

		stat_sv_type
		valEnd
		
		# lost, interfacial dissipation
		fldName
		energy_numerical_diss_2_phys_diss
	
		name_In_CSV_file	
		phi_N_norm_phi_d_tFin

		name_Latex
		\phi_N^{t_F}/{\phi_d}
	}

# ##############################################################
# # Phi, U, K, and P (Linear momentum) compared at different time stamps
# ###############	comparison of phi = K + U from diff criteria

	# phi of energy loss stabilized
	{
		isActive
		1
		
		fldName
		phi

		overwriterName		FIN
		
		name_In_CSV_file	
		phi

		name_Latex
		\phi
	}

	# phi of sigma max
	{
		isActive
		1
		
		fldName
		phi

		overwriterName		MAX
	
		name_In_CSV_file	
		phi

		name_Latex
		\phi
	}

	# phi of sigma ~ 0
	{
		isActive
		1
		
		fldName
		phi

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		phi_sigma0

		name_Latex
		\phi_{\sigma,0}
	}

	# phi when the first damage evolution starts (first D > 0 in the domain)
	{
		isActive
		1
		
		fldName
		phi

		timeStamp
			{
				timeStampType	l
				lct				Damage
			}
	
		name_In_CSV_file	
		phi_damage_i

		name_Latex
		\phi_{D,i}
	}

	# phi of highest damage evolution (D source max) 
	{
		isActive
		1
		
		fldName
		phi

		timeStamp
			{
				timeStampType	m
				lct				Damage
			}
	
		name_In_CSV_file	
		phi_damage_m

		name_Latex
		\phi_{D,m}
	}

	# phi of first D = 1 (damage final)
	{
		isActive
		1
		
		fldName
		phi

		timeStamp
			{
				timeStampType	f
				lct				Damage
			}
	
		name_In_CSV_file	
		phi_damage_f

		name_Latex
		\phi_{D,f}
	}

# ###############	comparison of Internal energy (U) from diff criteria

	# U of energy loss stabilized
	{
		isActive
		1
		
		fldName
		U

		overwriterName		FIN
		
		name_In_CSV_file	
		U

		name_Latex
		U
	}

	# U of sigma max
	{
		isActive
		1
		
		fldName
		U

		overwriterName		MAX
		
		name_In_CSV_file	
		U

		name_Latex
		U
	}

	# U of sigma ~ 0
	{
		isActive
		1
		
		fldName
		U

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		U_sigma0

		name_Latex
		U_{\sigma,0}
	}

	# U when the first damage evolution starts (first D > 0 in the domain)
	{
		isActive
		1
		
		fldName
		U

		timeStamp
			{
				timeStampType	l
				lct				Damage
			}
	
		name_In_CSV_file	
		U_damage_i

		name_Latex
		U_{D,i}
	}

	# U of highest damage evolution (D source max) 
	{
		isActive
		1
		
		fldName
		U

		timeStamp
			{
				timeStampType	m
				lct				Damage
			}
	
		name_In_CSV_file	
		U_damage_m

		name_Latex
		U_{D,m}
	}

	# U of first D = 1 (damage final)
	{
		isActive
		1
		
		fldName
		U

		timeStamp
			{
				timeStampType	f
				lct				Damage
			}
	
		name_In_CSV_file	
		U_damage_f

		name_Latex
		U_{D,f}
	}

# ###############	comparison of Kinetic energy (K) from diff criteria

	# K of energy loss stabilized
	{
		isActive
		1
		
		fldName
		K

		overwriterName		FIN
	
		name_In_CSV_file	
		K

		name_Latex
		K
	}

	# K of sigma max
	{
		isActive
		1
		
		fldName
		K

		overwriterName		MAX
	
		name_In_CSV_file	
		K

		name_Latex
		K
	}

	# K of sigma ~ 0
	{
		isActive
		1
		
		fldName
		K

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		K_sigma0

		name_Latex
		K_{\sigma,0}
	}

	# K when the first damage evolution starts (first D > 0 in the domain)
	{
		isActive
		1
		
		fldName
		K

		timeStamp
			{
				timeStampType	l
				lct				Damage
			}
	
		name_In_CSV_file	
		K_damage_i

		name_Latex
		K_{D,i}
	}

	# K of highest damage evolution (D source max) 
	{
		isActive
		1
		
		fldName
		K

		timeStamp
			{
				timeStampType	m
				lct				Damage
			}
	
		name_In_CSV_file	
		K_damage_m

		name_Latex
		K_{D,m}
	}

	# K of first D = 1 (damage final)
	{
		isActive
		1
		
		fldName
		K

		timeStamp
			{
				timeStampType	f
				lct				Damage
			}
	
		name_In_CSV_file	
		K_damage_f

		name_Latex
		K_{D,f}
	}

# ###############	comparison of linear momentum (P) from diff criteria
	# error	
	# LinMomentum error
	{
		isActive
		1
		
		fldName
		numerical_linmom_error

		overwriterName		FIN
	
		name_In_CSV_file	
		LinMomentumErr

		name_Latex
		P_{err}
	}

	# LinMomentum of energy loss stabilized
	{
		isActive
		1
		
		fldName
		linMomentum

		overwriterName		FIN
	
		name_In_CSV_file	
		LinMomentum

		name_Latex
		P
	}

	# LinMomentum of sigma max
	{
		isActive
		1
		
		fldName
		linMomentum

		overwriterName		MAX
	
		name_In_CSV_file	
		LinMomentum

		name_Latex
		P
	}

	# LinMomentum of sigma ~ 0
	{
		isActive
		1
		
		fldName
		linMomentum

		timeStamp
			{
				timeStampType	f
				lct				epssig_bulk
			}
	
		name_In_CSV_file	
		LinMomentum_sigma0

		name_Latex
		P_{\sigma,0}
	}

	# LinMomentum when the first damage evolution starts (first D > 0 in the domain)
	{
		isActive
		1
		
		fldName
		linMomentum

		timeStamp
			{
				timeStampType	l
				lct				Damage
			}
	
		name_In_CSV_file	
		LinMomentum_damage_i

		name_Latex
		P_{D,i}
	}

	# LinMomentum of highest damage evolution (D source max) 
	{
		isActive
		1
		
		fldName
		linMomentum

		timeStamp
			{
				timeStampType	m
				lct				Damage
			}
	
		name_In_CSV_file	
		LinMomentum_damage_m

		name_Latex
		P_{D,m}
	}

	# LinMomentum of first D = 1 (damage final)
	{
		isActive
		1
		
		fldName
		linMomentum

		timeStamp
			{
				timeStampType	f
				lct				Damage
			}
	
		name_In_CSV_file	
		LinMomentum_damage_f

		name_Latex
		P_{D,f}
	}

# ####################	temporal fields (space/ spacetime integrals over time)
	# lost dissipated energy
	{
		isActive
		1
		
		# this entry specifies that we are dealing with a temporal field as opposed to a scalar
		stat_sv_type
		all_field_time_val
		
		fldName
		phys_diss_lost

		name_In_CSV_file	
		phi_d

		name_Latex
		\phi_d
	}

	# U
	{
		isActive
		1
		
		# this entry specifies that we are dealing with a temporal field as opposed to a scalar
		stat_sv_type
		all_field_time_val
		
		fldName
		U

		name_In_CSV_file	
		U

		name_Latex
		U
	}

	# K
	{
		isActive
		1
		
		# this entry specifies that we are dealing with a temporal field as opposed to a scalar
		stat_sv_type
		all_field_time_val
		
		fldName
		K

		name_In_CSV_file	
		K

		name_Latex
		K
	}


	# U2phi
	{
		isActive
		1
		
		# this entry specifies that we are dealing with a temporal field as opposed to a scalar
		stat_sv_type
		all_field_time_val
		
		fldName
		U2phi

		name_In_CSV_file	
		U2phi

		name_Latex
		{U/\phi}
	}

	# homogenized stress by BC
	{
		isActive
		1
		
		# this entry specifies that we are dealing with a temporal field as opposed to a scalar
		stat_sv_type
		all_field_time_val
		
		fldName
		sigma_bulk

		name_In_CSV_file	
		bar_sigma_bulk

		name_Latex
		\bar{\sigma}_{bulk}
	}

# ####################	spatial solution fields
	########## max stage: use sigma max stage

	# Damage field
	{
		isActive
		1
		
		# this entry specifies that we are dealing with a spatial field as opposed to a scalar
		stat_sv_type
		all_field_val
		
		fldName
		DelU

		overwriterName		MAX
	
		name_In_CSV_file	
		DelU

		name_Latex
		{\Delta{u}}
	}

	# stress field
	{
		isActive
		1
		
		# this entry specifies that we are dealing with a spatial field as opposed to a scalar
		stat_sv_type
		all_field_val
		
		fldName
		sigma

		overwriterName		MAX
	
		name_In_CSV_file	
		stress

		name_Latex
		\sigma
	}

	########## final stage: use diss energy stabilized criterion

	# Damage field
	{
		isActive
		1
		
		# this entry specifies that we are dealing with a spatial field as opposed to a scalar
		stat_sv_type
		all_field_val
		
		fldName
		DelU

		overwriterName		FIN
	
		name_In_CSV_file	
		DelU

		name_Latex
		{\Delta{u}}
	}

	# stress field
	{
		isActive
		1
		
		# this entry specifies that we are dealing with a spatial field as opposed to a scalar
		stat_sv_type
		all_field_val
		
		fldName
		sigma

		overwriterName		FIN
	
		name_In_CSV_file	
		stress

		name_Latex
		\sigma
	}

}







##########################################################################################################################################################
#### fixed time intervals
################################################
# fixdTime + input
dataPointers			pps3_timeStep				input
{

	{
		isActive
		1
		
		# initial field
		fldName
		field_finalResolution
	
		name_In_CSV_file	
		iniSc

		name_Latex
		\sigma_c
	}
}



################################################
# fixedTime + output
dataPointers			pps3_timeStep				output
{

	# phiD:   Dissipated energy / normalized by initial energy
	{
		isActive
		1
		
		# lost, interfacial dissipation
		fldName
		phys_diss_interface_lost

		name_In_CSV_file	
		phi_d_norm

		name_Latex
		{(\phi_d/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}

	# K:   K / normalized by initial energy
	{
		isActive
		1
		
		fldName
		K
	
		name_In_CSV_file	
		phi_K_norm

		name_Latex
		{(K/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}


	# U:   U / normalized by initial energy at failed state
	{
		isActive
		1
		
		fldName
		U

		name_In_CSV_file	
		phi_U_norm

		name_Latex
		{(U/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}

	# U:   U / phi
	{
		isActive
		1
		
		fldName
		U2phi

		name_In_CSV_file	
		U2phi

		name_Latex
		{(U/\phi)}
	}

	# stress
	{
		isActive
		1
				
		fldName
		sigma_bulk

		name_In_CSV_file	
		bar_sigma_bulk

		name_Latex
		\bar{\sigma}_{bulk}
	}

	# LinMomentum
	{
		isActive
		1
		
		fldName
		linMomentum
	
		name_In_CSV_file	
		linMomentum

		name_Latex
		P
	}

	# phiNumerical:   Dissipated numerical
	{
		isActive
		1
		
		# lost, interfacial dissipation
		fldName
		numerial_energy_diss

		name_In_CSV_file	
		phi_N

		name_Latex
		\phi_N
	}

	# phiNumerical:   Dissipated numerical / normalized by initial energy at failed statefor eps/sig bulk criterion)
	{
		isActive
		1
		
		# lost, interfacial dissipation
		fldName
		numerial_energy_diss

		name_In_CSV_file	
		phi_N_norm_phi0

		name_Latex
		{(\phi_N/\phi_0)}
		
		# used to say normalize w.r.t. time zero energy
		normalizationMode
		ene_PhiInitial		
	}
	
	# LinMomentum - error 
	{
		isActive
		1
		
		fldName
		numerical_linmom_error
	
		name_In_CSV_file	
		linMomentumErr

		name_Latex
		P_{err}
	}

	# mean damage - over space
	{
		isActive
		1
				
		fldName
		mean_interface_damage

		name_In_CSV_file	
		bar_D

		name_Latex
		\bar{D}
	}

	# max damage - over space
	{
		isActive
		1
				
		fldName
		max_interface_damage

		name_In_CSV_file	
		max_D

		name_Latex
		D^{\mathrm{max}}
	}

# ####################	spatial solution fields
	# Damage field
	{
		isActive
		1
		
		# this entry specifies that we are dealing with a spatial field as opposed to a scalar
		stat_sv_type
		all_field_val
		
		fldName
		DelU
		name_In_CSV_file	
		DelU

		name_Latex
		{\Delta{u}}
	}

	# stress field
	{
		isActive
		1
		
		# this entry specifies that we are dealing with a spatial field as opposed to a scalar
		stat_sv_type
		all_field_val
		
		fldName
		sigma

		name_In_CSV_file	
		stress

		name_Latex
		\sigma
	}



}




}